[
 {
  "lines": [
   {
    "content": "public <T extends Comparable<T>> T[] sort(T[] array) {",
    "indent": 0
   },
   {
    "content": "while (!isSorted(array)) {",
    "indent": 1
   },
   {
    "content": "nextPermutation(array);",
    "indent": 2
   },
   {
    "content": "}",
    "indent": 1
   },
   {
    "content": "return array;",
    "indent": 1
   },
   {
    "content": "}",
    "indent": 0
   }
  ],
  "fileEnding": "java",
  "title": "sort",
  "charCount": 124,
  "id": 100
 },
 {
  "lines": [
   {
    "content": "public <T extends Comparable<T>> T[] sort(T[] array) {",
    "indent": 0
   },
   {
    "content": "for (int i = 0, size = array.length; i < size - 1; ++i) {",
    "indent": 1
   },
   {
    "content": "boolean swapped = false;",
    "indent": 2
   },
   {
    "content": "for (int j = 0; j < size - 1 - i; ++j) {",
    "indent": 2
   },
   {
    "content": "if (greater(array[j], array[j + 1])) {",
    "indent": 3
   },
   {
    "content": "swap(array, j, j + 1);",
    "indent": 4
   },
   {
    "content": "swapped = true;",
    "indent": 4
   },
   {
    "content": "}",
    "indent": 3
   },
   {
    "content": "}",
    "indent": 2
   },
   {
    "content": "if (!swapped) {",
    "indent": 2
   },
   {
    "content": "break;",
    "indent": 3
   },
   {
    "content": "}",
    "indent": 2
   },
   {
    "content": "}",
    "indent": 1
   },
   {
    "content": "return array;",
    "indent": 1
   },
   {
    "content": "}",
    "indent": 0
   }
  ],
  "fileEnding": "java",
  "title": "sort",
  "charCount": 304,
  "id": 101
 },
 {
  "lines": [
   {
    "content": "public static int max(int[] arr) {",
    "indent": 0
   },
   {
    "content": "int max = arr[0];",
    "indent": 1
   },
   {
    "content": "for (int value : arr) {",
    "indent": 1
   },
   {
    "content": "if (value > max) {",
    "indent": 2
   },
   {
    "content": "max = value;",
    "indent": 3
   },
   {
    "content": "}",
    "indent": 2
   },
   {
    "content": "}",
    "indent": 1
   },
   {
    "content": "return max;",
    "indent": 1
   },
   {
    "content": "}",
    "indent": 0
   }
  ],
  "fileEnding": "java",
  "title": "max",
  "charCount": 127,
  "id": 102
 },
 {
  "lines": [
   {
    "content": "public static int min(int[] arr) {",
    "indent": 0
   },
   {
    "content": "int min = arr[0];",
    "indent": 1
   },
   {
    "content": "for (int value : arr) {",
    "indent": 1
   },
   {
    "content": "if (value < min) {",
    "indent": 2
   },
   {
    "content": "min = value;",
    "indent": 3
   },
   {
    "content": "}",
    "indent": 2
   },
   {
    "content": "}",
    "indent": 1
   },
   {
    "content": "return min;",
    "indent": 1
   },
   {
    "content": "}",
    "indent": 0
   }
  ],
  "fileEnding": "java",
  "title": "min",
  "charCount": 127,
  "id": 103
 },
 {
  "lines": [
   {
    "content": "public <T extends Comparable<T>> T[] sort(T[] array) {",
    "indent": 0
   },
   {
    "content": "int length = array.length;",
    "indent": 1
   },
   {
    "content": "int left = 0;",
    "indent": 1
   },
   {
    "content": "int right = length - 1;",
    "indent": 1
   },
   {
    "content": "int swappedLeft, swappedRight;",
    "indent": 1
   },
   {
    "content": "while (left < right) {",
    "indent": 1
   },
   {
    "content": "swappedRight = 0;",
    "indent": 2
   },
   {
    "content": "for (int i = left; i < right; i++) {",
    "indent": 2
   },
   {
    "content": "if (SortUtils.less(array[i + 1], array[i])) {",
    "indent": 3
   },
   {
    "content": "SortUtils.swap(array, i, i + 1);",
    "indent": 4
   },
   {
    "content": "swappedRight = i;",
    "indent": 4
   },
   {
    "content": "}",
    "indent": 3
   },
   {
    "content": "}",
    "indent": 2
   },
   {
    "content": "right = swappedRight;",
    "indent": 2
   },
   {
    "content": "swappedLeft = length - 1;",
    "indent": 2
   },
   {
    "content": "for (int j = right; j > left; j--) {",
    "indent": 2
   },
   {
    "content": "if (SortUtils.less(array[j], array[j - 1])) {",
    "indent": 3
   },
   {
    "content": "SortUtils.swap(array, j - 1, j);",
    "indent": 4
   },
   {
    "content": "swappedLeft = j;",
    "indent": 4
   },
   {
    "content": "}",
    "indent": 3
   },
   {
    "content": "}",
    "indent": 2
   },
   {
    "content": "left = swappedLeft;",
    "indent": 2
   },
   {
    "content": "}",
    "indent": 1
   },
   {
    "content": "return array;",
    "indent": 1
   },
   {
    "content": "}",
    "indent": 0
   }
  ],
  "fileEnding": "java",
  "title": "sort",
  "charCount": 553,
  "id": 104
 },
 {
  "lines": [
   {
    "content": "public <T extends Comparable<T>> T[] sort(T[] arr) {",
    "indent": 0
   },
   {
    "content": "int size = arr.length;",
    "indent": 1
   },
   {
    "content": "int gap = size;",
    "indent": 1
   },
   {
    "content": "boolean swapped = true;",
    "indent": 1
   },
   {
    "content": "while (gap != 1 || swapped) {",
    "indent": 1
   },
   {
    "content": "gap = nextGap(gap);",
    "indent": 2
   },
   {
    "content": "swapped = false;",
    "indent": 2
   },
   {
    "content": "for (int i = 0; i < size - gap; i++) {",
    "indent": 2
   },
   {
    "content": "if (less(arr[i + gap], arr[i])) {",
    "indent": 3
   },
   {
    "content": "swapped = swap(arr, i, i + gap);",
    "indent": 4
   },
   {
    "content": "}",
    "indent": 3
   },
   {
    "content": "}",
    "indent": 2
   },
   {
    "content": "}",
    "indent": 1
   },
   {
    "content": "return arr;",
    "indent": 1
   },
   {
    "content": "}",
    "indent": 0
   }
  ],
  "fileEnding": "java",
  "title": "sort",
  "charCount": 309,
  "id": 105
 },
 {
  "lines": [
   {
    "content": "public <T extends Comparable<T>> List<T> sort(List<T> list) {",
    "indent": 0
   },
   {
    "content": "Map<T, Integer> frequency = new TreeMap<>();",
    "indent": 1
   },
   {
    "content": "List<T> sortedArray = new ArrayList<>(list.size());",
    "indent": 1
   },
   {
    "content": "list.forEach(v -> frequency.put(v, frequency.getOrDefault(v, 0) + 1));",
    "indent": 1
   },
   {
    "content": "for (Map.Entry<T, Integer> element : frequency.entrySet()) {",
    "indent": 1
   },
   {
    "content": "for (int j = 0; j < element.getValue(); j++) {",
    "indent": 2
   },
   {
    "content": "sortedArray.add(element.getKey());",
    "indent": 3
   },
   {
    "content": "}",
    "indent": 2
   },
   {
    "content": "}",
    "indent": 1
   },
   {
    "content": "return sortedArray;",
    "indent": 1
   },
   {
    "content": "}",
    "indent": 0
   }
  ],
  "fileEnding": "java",
  "title": "sort",
  "charCount": 399,
  "id": 106
 },
 {
  "lines": [
   {
    "content": "public <T extends Comparable<T>> T[] sort(T[] arr) {",
    "indent": 0
   },
   {
    "content": "int i = 1;",
    "indent": 1
   },
   {
    "content": "int j = 2;",
    "indent": 1
   },
   {
    "content": "while (i < arr.length) {",
    "indent": 1
   },
   {
    "content": "if (less(arr[i - 1], arr[i])) i = j++;",
    "indent": 2
   },
   {
    "content": "else {",
    "indent": 2
   },
   {
    "content": "swap(arr, i - 1, i);",
    "indent": 3
   },
   {
    "content": "if (--i == 0) {",
    "indent": 3
   },
   {
    "content": "i = j++;",
    "indent": 4
   },
   {
    "content": "}",
    "indent": 3
   },
   {
    "content": "}",
    "indent": 2
   },
   {
    "content": "}",
    "indent": 1
   },
   {
    "content": "return null;",
    "indent": 1
   },
   {
    "content": "}",
    "indent": 0
   }
  ],
  "fileEnding": "java",
  "title": "sort",
  "charCount": 213,
  "id": 107
 },
 {
  "lines": [
   {
    "content": "public <T extends Comparable<T>> List<T> sort(List<T> unsorted) {",
    "indent": 0
   },
   {
    "content": "int size = unsorted.size();",
    "indent": 1
   },
   {
    "content": "@SuppressWarnings(\"unchecked\")",
    "indent": 1
   },
   {
    "content": "Heap<T> heap = new Heap<>(unsorted.toArray((T[]) new Comparable[unsorted.size()]));",
    "indent": 1
   },
   {
    "content": "heap.makeMinHeap(0);",
    "indent": 1
   },
   {
    "content": "List<T> sorted = new ArrayList<>(size);",
    "indent": 1
   },
   {
    "content": "while (size > 0) {",
    "indent": 1
   },
   {
    "content": "T min = heap.getRoot(--size);",
    "indent": 2
   },
   {
    "content": "sorted.add(min);",
    "indent": 2
   },
   {
    "content": "}",
    "indent": 1
   },
   {
    "content": "return sorted;",
    "indent": 1
   },
   {
    "content": "}",
    "indent": 0
   }
  ],
  "fileEnding": "java",
  "title": "sort",
  "charCount": 355,
  "id": 108
 },
 {
  "lines": [
   {
    "content": "public <T extends Comparable<T>> T[] sort(T[] array) {",
    "indent": 0
   },
   {
    "content": "for (int i = 1; i < array.length; i++) {",
    "indent": 1
   },
   {
    "content": "T insertValue = array[i];",
    "indent": 2
   },
   {
    "content": "int j;",
    "indent": 2
   },
   {
    "content": "for (j = i - 1; j >= 0 && less(insertValue, array[j]); j--) {",
    "indent": 2
   },
   {
    "content": "array[j + 1] = array[j];",
    "indent": 3
   },
   {
    "content": "}",
    "indent": 2
   },
   {
    "content": "if (j != i - 1) {",
    "indent": 2
   },
   {
    "content": "array[j + 1] = insertValue;",
    "indent": 3
   },
   {
    "content": "}",
    "indent": 2
   },
   {
    "content": "}",
    "indent": 1
   },
   {
    "content": "return array;",
    "indent": 1
   },
   {
    "content": "}",
    "indent": 0
   }
  ],
  "fileEnding": "java",
  "title": "sort",
  "charCount": 284,
  "id": 109
 },
 {
  "lines": [
   {
    "content": "public <T extends Comparable<T>> T[] sort(T[] array) {",
    "indent": 0
   },
   {
    "content": "int size = array.length;",
    "indent": 1
   },
   {
    "content": "for (int i = 0; i < size; i++) {",
    "indent": 1
   },
   {
    "content": "T max = array[0];",
    "indent": 2
   },
   {
    "content": "int index = 0;",
    "indent": 2
   },
   {
    "content": "for (int j = 0; j < size - i; j++) {",
    "indent": 2
   },
   {
    "content": "if (less(max, array[j])) {",
    "indent": 3
   },
   {
    "content": "max = array[j];",
    "indent": 4
   },
   {
    "content": "index = j;",
    "indent": 4
   },
   {
    "content": "}",
    "indent": 3
   },
   {
    "content": "}",
    "indent": 2
   },
   {
    "content": "flip(array, index, array.length - 1 - i);",
    "indent": 2
   },
   {
    "content": "}",
    "indent": 1
   },
   {
    "content": "return array;",
    "indent": 1
   },
   {
    "content": "}",
    "indent": 0
   }
  ],
  "fileEnding": "java",
  "title": "sort",
  "charCount": 301,
  "id": 110
 },
 {
  "lines": [
   {
    "content": "public <T extends Comparable<T>> T[] sort(T[] arr) {",
    "indent": 0
   },
   {
    "content": "int n = arr.length;",
    "indent": 1
   },
   {
    "content": "for (int i = 0; i < n - 1; i++) {",
    "indent": 1
   },
   {
    "content": "int minIndex = i;",
    "indent": 2
   },
   {
    "content": "for (int j = i + 1; j < n; j++) {",
    "indent": 2
   },
   {
    "content": "if (arr[minIndex].compareTo(arr[j]) > 0) {",
    "indent": 3
   },
   {
    "content": "minIndex = j;",
    "indent": 4
   },
   {
    "content": "}",
    "indent": 3
   },
   {
    "content": "}",
    "indent": 2
   },
   {
    "content": "if (minIndex != i) {",
    "indent": 2
   },
   {
    "content": "T temp = arr[i];",
    "indent": 3
   },
   {
    "content": "arr[i] = arr[minIndex];",
    "indent": 3
   },
   {
    "content": "arr[minIndex] = temp;",
    "indent": 3
   },
   {
    "content": "}",
    "indent": 2
   },
   {
    "content": "}",
    "indent": 1
   },
   {
    "content": "return arr;",
    "indent": 1
   },
   {
    "content": "}",
    "indent": 0
   }
  ],
  "fileEnding": "java",
  "title": "sort",
  "charCount": 322,
  "id": 111
 },
 {
  "lines": [
   {
    "content": "static <T> boolean swap(T[] array, int idx, int idy) {",
    "indent": 0
   },
   {
    "content": "T swap = array[idx];",
    "indent": 1
   },
   {
    "content": "array[idx] = array[idy];",
    "indent": 1
   },
   {
    "content": "array[idy] = swap;",
    "indent": 1
   },
   {
    "content": "return true;",
    "indent": 1
   },
   {
    "content": "}",
    "indent": 0
   }
  ],
  "fileEnding": "java",
  "title": "swap",
  "charCount": 135,
  "id": 112
 },
 {
  "lines": [
   {
    "content": "static <T extends Comparable<T>> void flip(T[] array, int left, int right) {",
    "indent": 0
   },
   {
    "content": "while (left <= right) {",
    "indent": 1
   },
   {
    "content": "swap(array, left++, right--);",
    "indent": 2
   },
   {
    "content": "}",
    "indent": 1
   },
   {
    "content": "}",
    "indent": 0
   }
  ],
  "fileEnding": "java",
  "title": "flip",
  "charCount": 135,
  "id": 113
 },
 {
  "lines": [
   {
    "content": "public void insertion_sort(int[] array, int start_idx, int end_idx) {",
    "indent": 0
   },
   {
    "content": "for (int i = 0; i < array.length; i++) {",
    "indent": 1
   },
   {
    "content": "int current_element = array[i];",
    "indent": 2
   },
   {
    "content": "int j = i - 1;",
    "indent": 2
   },
   {
    "content": "while (j >= 0 && array[j] > current_element) {",
    "indent": 2
   },
   {
    "content": "array[j + 1] = array[j];",
    "indent": 3
   },
   {
    "content": "j--;",
    "indent": 3
   },
   {
    "content": "}",
    "indent": 2
   },
   {
    "content": "array[j + 1] = current_element;",
    "indent": 2
   },
   {
    "content": "}",
    "indent": 1
   },
   {
    "content": "}",
    "indent": 0
   }
  ],
  "fileEnding": "java",
  "title": "insertion_sort",
  "charCount": 273,
  "id": 114
 },
 {
  "lines": [
   {
    "content": "public void merge_runs(int array[], int start, int mid, int end) {",
    "indent": 0
   },
   {
    "content": "int first_array_size = mid - start + 1, second_array_size = end - mid;",
    "indent": 1
   },
   {
    "content": "int array1[] = new int[first_array_size], array2[] = new int[second_array_size];",
    "indent": 1
   },
   {
    "content": "int i = 0, j = 0, k = 0;",
    "indent": 1
   },
   {
    "content": "for (i = 0; i < first_array_size; i++) array1[i] = array[start + i];",
    "indent": 1
   },
   {
    "content": "for (i = 0; i < second_array_size; i++) array2[i] = array[mid + 1 + i];",
    "indent": 1
   },
   {
    "content": "i = 0;",
    "indent": 1
   },
   {
    "content": "j = 0;",
    "indent": 1
   },
   {
    "content": "k = start;",
    "indent": 1
   },
   {
    "content": "while (i < first_array_size && j < second_array_size) {",
    "indent": 1
   },
   {
    "content": "if (array1[i] <= array2[j]) {",
    "indent": 2
   },
   {
    "content": "array[k] = array1[i];",
    "indent": 3
   },
   {
    "content": "i++;",
    "indent": 3
   },
   {
    "content": "} else {",
    "indent": 2
   },
   {
    "content": "array[k] = array2[j];",
    "indent": 3
   },
   {
    "content": "j++;",
    "indent": 3
   },
   {
    "content": "}",
    "indent": 2
   },
   {
    "content": "k++;",
    "indent": 2
   },
   {
    "content": "}",
    "indent": 1
   },
   {
    "content": "while (i < first_array_size) {",
    "indent": 1
   },
   {
    "content": "array[k] = array1[i];",
    "indent": 2
   },
   {
    "content": "k++;",
    "indent": 2
   },
   {
    "content": "i++;",
    "indent": 2
   },
   {
    "content": "}",
    "indent": 1
   },
   {
    "content": "while (j < second_array_size) {",
    "indent": 1
   },
   {
    "content": "array[k] = array2[j];",
    "indent": 2
   },
   {
    "content": "k++;",
    "indent": 2
   },
   {
    "content": "j++;",
    "indent": 2
   },
   {
    "content": "}",
    "indent": 1
   },
   {
    "content": "}",
    "indent": 0
   }
  ],
  "fileEnding": "java",
  "title": "merge_runs",
  "charCount": 701,
  "id": 115
 }
]